"use strict";function config($locationProvider){$locationProvider.hashPrefix("!")}function run(editableOptions,editableThemes){editableThemes.bs3.buttonsClass="btn-sm",editableOptions.theme="bs3"}function ready(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}function config(growlProvider){growlProvider.globalPosition("top-center"),growlProvider.globalTimeToLive({success:2e3,error:6e3,warning:6e3,info:4e3})}function HeaderController($scope,$state,Authentication,Menus,Search,Users,dialogs,lodash,UserService){function onSelect(group){return canUserJoinGroup(group)?void _joinGroupAndUser(group):void _notifyUser(group)}function _joinGroupAndUser(group){return user.joinedGroups.push(group),UserService.joinGroupAndUser(user,group).then(function(response){Authentication.user=response.data,$state.go("viewGroup.listMembers.viewMembers",{groupId:group._id})},function(){})}function canUserJoinGroup(group){return!_hasUserJoinedGroup(group)&&!_hasUserCreatedGroup(group)}function _hasUserJoinedGroup(group){return _.include(_.pluck(user.joinedGroup,"_id"),group._id)}function _hasUserCreatedGroup(group){return _.include(_.pluck(user.createdGroup,"_id"),group._id)}function _notifyUser(group){var header="Join Group",msg='You have already joined <span class="text-primary">'+group.name+"</span>.",opts={size:"sm",windowClass:"modal-btn-sm"};dialogs.notify(header,msg,opts)}$scope.authentication=Authentication;var user=Authentication.user,_=lodash;$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.title="SportsScheduler",$scope.getGroups=Search.getGroups,$scope.onSelect=onSelect,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}function ssDialog(dialogs){function postLink(scope,element,attrs){function clickFn(e){scope.enable&&(e.preventDefault(),launch(scope,attrs))}element.bind("click",clickFn)}function launch(scope,attrs){var config=angular.extend({size:"sm"},scope.config),dlg=dialogs.confirm(attrs.title,attrs.message,config);dlg.result.then(function(){scope.ok()},function(){scope.cancel&&scope.cancel()})}var dd={scope:{ok:"&dialogOk",cancel:"&dialogCancel",enable:"=dialogEnable",config:"@dialogConfig"},restrict:"A",link:postLink};return dd}function EventsController($scope,$state,$stateParams,$location,Authentication,Events,growl,lodash){function getDate(){$scope.event.date=new Date}function clearDate(){$scope.event.date=null}function disableDate(date,mode){return"day"===mode&&(0===date.getDay()||6===date.getDay())}function toggleMin(){$scope.minDate=$scope.minDate?null:new Date}function openDate($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!0}function dateChange(){$scope.dateError=$scope.event.date?!1:!0}function timeChange(){now=new Date,time=now.getTime(),hrsDiff=$scope.event.time.getTime()-time,$scope.timeError=HRS_MS>hrsDiff?!0:!1}function hasEventExpired(eventTime){var now=Date.now(),eD=Date.parse(eventTime);return hrsDiff=eD-now,0>hrsDiff?!0:!1}function watchLocation(newVal){newVal&&($scope.event.location.lat=newVal.lat(),$scope.event.location.lng=newVal.lng())}function create(){if(!$scope.timeError&&!$scope.dateError){var event=new Events($scope.event),params={groupId:$stateParams.groupId};return event.group=$stateParams.groupId,event.$save(params,function(){$scope.event=event,$state.go("viewGroup.listEvents.viewEvent",{eventId:$scope.event._id}),_notifySuccess("Event created successfully")}),event.$promise}}function remove(){var params={eventId:$stateParams.eventId},event=Events.remove(params,function(){$scope.event=event,$state.go("viewGroup.listEvents.viewEvents"),_notifySuccess("Event successfully removed")});return event.$promise}function update(){if($scope.timeError||$scope.dateError)return _getPromise(!1,"");var params={eventId:$stateParams.eventId};$scope.event.group=$stateParams.groupId;var event=Events.update(params,$scope.event,function(data){$scope.event=data,$state.go("viewGroup.listEvents.viewEvent",{eventId:$scope.event._id})});return event.$promise}function find(){return $scope.events=Events.query()}function findOne(){var event=Events.get({eventId:$stateParams.eventId},function(){$scope.event=event});return event.$promise}function _notifySuccess(text){text=text||"Event updated successfully",growl.success(text,{title:text})}function voteYes(){function success(){_notifySuccess("Voted successfully")}function failure(){_deleteUserFromYes($scope.user),_addUserToVoteNo($scope.user)}_addUserToVoteYes($scope.user),update().then(success,failure)}function voteNo(){function success(){_notifySuccess("Voted successfully")}function failure(){_deleteUserFromNo($scope.user),_addUserToVoteYes($scope.user)}_addUserToVoteNo($scope.user),update().then(success,failure)}function _addUserToVoteYes(user){user=user||$scope.user,_hasUserVotedNo(user)&&_deleteUserFromNo(user),_hasUserVotedYes(user)||$scope.event.votes.yes.push(user)}function _addUserToVoteNo(user){user=user||$scope.user,_hasUserVotedYes(user)&&_deleteUserFromYes(user),_hasUserVotedNo(user)||$scope.event.votes.no.push(user)}function _deleteUserFromYes(user){user=user||$scope.user,$scope.event.votes.yes=_.reject($scope.event.votes.yes,function(item){return _.isEqual(item._id,user._id)})}function _deleteUserFromNo(user){user=user||$scope.user,$scope.event.votes.no=_.reject($scope.event.votes.no,function(item){return _.isEqual(item._id,user._id)})}function _getPromise(isSuccess,data){var deferred=$q.defer();return setTimeout(function(){isSuccess?deferred.resolve(data):deferred.reject(data)},1),deferred.promise}function hasVotedYes(user){return _hasUserVotedYes(user)}function hasVotedNo(user){return _hasUserVotedNo(user)}function _hasUserVotedYes(user){return user=user||$scope.user,_.include(_.pluck($scope.event.votes.yes,"_id"),user._id)}function _hasUserVotedNo(user){return user=user||$scope.user,_.include(_.pluck($scope.event.votes.no,"_id"),user._id)}var _=lodash;$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.state=$state,$scope.stateParams=$stateParams,$scope.event=$scope.event||{},$scope.event={voteEnabled:!0,minimumVotes:0},$scope.create=create,$scope.remove=remove,$scope.update=update,$scope.find=find,$scope.findOne=findOne,$scope.options={country:"us"},$scope.details="",$scope.today=getDate,$scope.today(),$scope.clear=clearDate,$scope.disabled=disableDate,$scope.toggleMin=toggleMin,$scope.toggleMin(),$scope.open=openDate,$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0],$scope.dateChange=dateChange;var date=new Date,plusTwoHrs=date.getHours()+3;date.setHours(plusTwoHrs),$scope.event.time=date;var now,hrsDiff,time,HRS=2,HRS_MS=60*HRS*60*1e3;$scope.timeChange=timeChange,$scope.$watch("details.geometry.location",watchLocation),$scope.hasEventExpired=hasEventExpired,$scope.voteYes=voteYes,$scope.voteNo=voteNo,$scope.hasVotedYes=hasVotedYes,$scope.hasVotedNo=hasVotedNo}function Menus(Menus){Menus.addMenuItem("topbar","Groups","groups","dropdown","/groups(/create)?"),Menus.addSubMenuItem("topbar","groups","List Groups","groups"),Menus.addSubMenuItem("topbar","groups","New Group","groups/create")}function GroupsController($scope,$state,$stateParams,$location,Authentication,Groups,Search,lodash,dialogs,$q,growl){function create(){var group=new Groups($scope.group);return group.$save(function(data){_updateUser(data),$state.go("viewGroup.listMembers.viewMembers",{groupId:data._id}),_notifySuccess("Group successfully created")})}function remove(){return $scope.group.$remove(function(){$location.path("groups")})}function update(){return $scope.group.$update()}function find(){$scope.groups=Groups.query(),_getUser()}function _addIsAdminAttr(){_.each($scope.group.members,function(item){_.include(_.pluck($scope.group.admins,"_id"),item._id)&&(item.isAdmin=_.isUndefined(item.isAdmin)?!0:!1)})}function findOne(){return $scope.group=Groups.get({groupId:$stateParams.groupId},function(){$scope.group.members=_.uniq(_.union($scope.group.members,$scope.group.admins),"_id"),_addIsAdminAttr()})}function onSelect($model){if(_isUserInTempMembers($model)||_isUserInMembers($model)){var header="Add Members",msg='<span class="text-primary">'+$model.username+"</span> already in the group.",opts={size:"sm",windowClass:"modal-btn-sm"};dialogs.notify(header,msg,opts)}else $scope.tempMembers.push($model)}function removeMember(index){function success(){_addIsAdminAttr(),_notifySuccess("Member "+member.username+" removed")}function failure(){_addMember(member),_addAdmin(member)}var member=_getMember(index);if(member.isAdmin){if(!canRemoveAdmin())return _notifyCannotRemoveAdmin(),_getPromise(!1,member);_deleteAdminMember(member)}return _deleteMember(member),update().then(success,failure)}function _getMember(index){return $scope.group.members[index]}function removeTempMember(index){$scope.tempMembers.splice(index,1)}function saveMember(){return $scope.group.members=_.union($scope.group.members,$scope.tempMembers),update().then(function(){$state.go("viewGroup.listMembers.viewMembers"),$scope.tempMembers=[],_addIsAdminAttr(),_notifySuccess("Member successfully added")})}function addMember(){var opts={size:"sm"};dialogs.create("/modules/members/views/templ-add-member.client.view.html","MembersController",$scope.group,opts)}function isAdmin(){return _.isUndefined($scope.group.admins)?!1:_isUserInAdmins($scope.authentication.user)}function isOwner(member){return member._id!==$scope.group.createdBy._id?!1:_isUserInAdmins($scope.group.createdBy)}function makeAdmin(member){function success(){_addIsAdminAttr(),_notifySuccess("Admin successfully added")}function failure(){_.dropRight($scope.group.admins)}return _addAdmin(member)?update().then(success,failure):_getPromise(!1,member)}function removeAdmin(member){function success(){_addIsAdminAttr(),_notifySuccess("Admin successfully removed")}function failure(){_addAdmin(member)}return canRemoveAdmin()?(_deleteAdminMember(member),update().then(success,failure)):(_notifyCannotRemoveAdmin(),_getPromise(!1,member))}function canRemoveAdmin(){return _.size($scope.group.admins)>1}function _notifyCannotRemoveAdmin(){var header="Remove Admin",msg="Group requires an admin. Assign admin rights to a member in order to remove one",opts={size:"sm",windowClass:"modal-btn-sm"};dialogs.notify(header,msg,opts)}function _addAdmin(member){return _isUserInAdmins(member)?!1:($scope.group.admins.push(member),!0)}function _addMember(member){return _isUserInMembers(member)?!1:($scope.group.members.push(member),!0)}function _deleteAdminMember(member){$scope.group.admins=_.reject($scope.group.admins,function(item){return _.isEqual(item._id,member._id)})}function _deleteMember(member){$scope.group.members=_.reject($scope.group.members,function(item){return _.isEqual(item._id,member._id)})}function _isUserInTempMembers(user){return _.include(_.pluck($scope.tempMembers,"_id"),user._id)}function _isUserInAdmins(user){return _.includes(_.pluck($scope.group.admins,"_id"),user._id)}function _isUserInMembers(user){return _.include(_.pluck($scope.group.members,"_id"),user._id)}function _getPromise(isSuccess,data){var deferred=$q.defer();return setTimeout(function(){isSuccess?deferred.resolve(data):deferred.reject(data)},1),deferred.promise}function _notifySuccess(text){text=text||"Group successfully updated",growl.success(text,{title:text})}function _updateUser(group){$scope.user.createdGroups.push(group),Authentication.user=$scope.user}function _getUser(){$scope.user=Authentication.user}var _=lodash;$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.$state=$state,$scope.create=create,$scope.remove=remove,$scope.update=update,$scope.find=find,$scope.findOne=findOne,$scope.tempMembers=[],$scope.getMembers=Search.getUsers,$scope.onSelect=onSelect,$scope.removeMember=removeMember,$scope.removeTempMember=removeTempMember,$scope.saveMember=saveMember,$scope.addMember=addMember,$scope.isAdmin=isAdmin,$scope.isOwner=isOwner,$scope.makeAdmin=makeAdmin,$scope.removeAdmin=removeAdmin,$scope.canRemoveAdmin=canRemoveAdmin}function GroupEvents($http){function create(groupId,data){var request=$http({method:"post",url:url(groupId),data:data});return request.then(handleSuccess,handleError)}function get(groupId,eventId){var request=$http({method:"get",url:url(groupId,eventId)});return request.then(handleSuccess,handleError)}function update(groupId,eventId,data){var request=$http({method:"put",url:url(groupId,eventId),data:data});return request.then(handleSuccess,handleError)}function remove(groupId,eventId){var request=$http({method:"delete",url:url(groupId,eventId)});return request.then(handleSuccess,handleError)}function handleError(response){return $q.reject(angular.isObject(response.data)&&response.data.message?response.data.message:"An unknown error occurred.")}function handleSuccess(response){return response.data}function url(groupId,eventId){function replacer(match){return/\/{2,}/g.test(match)?"/":""}groupId=groupId?groupId:"",eventId=eventId?eventId:"";var api="api/users/groups/"+groupId+"/events/"+eventId,reg=/\/{2,}|\/+$/g;return api.replace(reg,replacer)}var service={create:create,get:get,update:update,remove:remove},url=url;return service}function MembersController($scope,$state,$stateParams,$location,Authentication,Groups,Search,lodash,$modalInstance,data){function create(){var group=new Groups($scope.group);group.$save(function(){redirectHome(group._id)})}function remove(){$scope.group.$remove(function(){$location.path("groups")})}function update(){$scope.group.$update(function(){})}function find(){$scope.groups=Groups.query()}function findOne(){$scope.group=Groups.get({groupId:$stateParams.groupId},function(){angular.copy($scope.group.members,$scope.tempMembers)})}function onSelect($model){var tempMembers=$scope.tempMembers;tempMembers.push($model),$scope.tempMembers=_.uniq(tempMembers,"_id"),$scope.search.members=""}function removeMember(index){$scope.group.members.splice(index,1)}function removeTempMember(index){$scope.tempMembers.splice(index,1)}function saveMember(){angular.copy($scope.tempMembers,$scope.group.members),update()}function redirectHome(id){var _id=id?id:$stateParams.groupId;$location.path("groups/"+_id+"/members/list")}function isAdmin(){var out=_.some($scope.group.admins,{_id:$scope.authentication.user._id});return $scope.$broadcast("isAdmin",out),out}function cancel(){$modalInstance.dismiss("Canceled")}function save(){update(),$modalInstance.close()}var _=lodash;$scope.authentication=Authentication,$scope.$state=$state,$scope.group=data,$scope.create=create,$scope.remove=remove,$scope.update=update,$scope.find=find,$scope.findOne=findOne,$scope.tempMembers=[],$scope.getMembers=Search.getUsers,$scope.onSelect=onSelect,$scope.removeMember=removeMember,$scope.removeTempMember=removeTempMember,$scope.saveMember=saveMember,$scope.isAdmin=isAdmin,$scope.cancel=cancel,$scope.save=save}function config($httpProvider){$httpProvider.interceptors.push("HttpProviderInterceptor")}function Authorization(){var service={isAuf:function(){}};return service}function Search($http){function getUsers(val){return $http.get("/api/users/",{params:{username:val}}).then(function(response){return response.data})}function getGroups(val){return $http.get("/api/users/groups/",{params:{name:val}}).then(function(response){return response.data})}var service={getUsers:getUsers,getGroups:getGroups};return service}function Users($resource){return $resource("/api/users/:userId",{userId:"@_id"},{update:{method:"PUT"},query:{method:"GET",isArray:!0}})}function UserService($http){function joinGroupAndUser(user,group){return $http.post(url,{user:user,group:group}).success(function(data){return data})}var service={joinGroupAndUser:joinGroupAndUser},url="/api/users/joinGroup";return service}var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngSanitize","ui.router","ui.bootstrap","ui.utils","validation","validationrule","ngAutocomplete","ngLodash","720kb.fx","xeditable","dialogs.main","angular-growl"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",config]).run(["editableOptions","editableThemes",run]),angular.element(document).ready(ready),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("events"),ApplicationConfiguration.registerModule("groups"),ApplicationConfiguration.registerModule("members"),ApplicationConfiguration.registerModule("sms"),ApplicationConfiguration.registerModule("userform"),ApplicationConfiguration.registerModule("users"),ApplicationConfiguration.registerModule("validationrule"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").config(config),angular.module("core").controller("HeaderController",HeaderController),HeaderController.$inject=["$scope","$state","Authentication","Menus","Search","Users","dialogs","lodash","UserService"],angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),function(){angular.module("core").directive("ngReallyClick",[function(){return{restrict:"A",link:function(scope,element,attrs){element.bind("click",function(){var message=attrs.ngReallyMessage;message&&confirm(message)&&scope.$apply(attrs.ngReallyClick)})}}}])}.call(this),angular.module("core").directive("ssDialog",ssDialog),ssDialog.$inject=["dialogs"],angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("events").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Events","events","dropdown","/events(/create)?"),Menus.addSubMenuItem("topbar","events","List Events","events"),Menus.addSubMenuItem("topbar","events","New Event","events/create")}]),angular.module("events").config(["$stateProvider",function($stateProvider){$stateProvider.state("listEvents",{url:"/events",templateUrl:"modules/events/views/list-events.client.view.html"}).state("createEvent",{url:"/events/create",templateUrl:"modules/events/views/create-event.client.view.html"}).state("viewEvent",{url:"/events/:eventId",templateUrl:"modules/events/views/view-event.client.view.html"}).state("editEvent",{url:"/events/:eventId/edit",templateUrl:"modules/events/views/edit-event.client.view.html"})}]),angular.module("events").controller("EventsController",EventsController),EventsController.$inject=["$scope","$state","$stateParams","$location","Authentication","Events","growl","lodash"],angular.module("events").factory("Events",["$resource",function($resource){return $resource("/api/users/groups/:groupId/events/:eventId",{groupId:"@group._id",eventId:"@_id"},{update:{method:"PUT"},query:{method:"GET",isArray:!0}})}]),angular.module("groups").run(Menus),Menus.$inject=["Menus"],angular.module("groups").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGroups",{url:"/groups",templateUrl:"modules/groups/views/list-groups.client.view.html"}).state("createGroup",{url:"/groups/create",templateUrl:"modules/groups/views/create-group.client.view.html"}).state("viewGroup",{url:"/groups/:groupId",templateUrl:"modules/groups/views/view-group.client.view.html"}).state("viewGroup.listMembers",{url:"/members",templateUrl:"modules/groups/views/view-members-group.client.view.html"}).state("viewGroup.listMembers.viewMembers",{url:"/list",templateUrl:"modules/groups/views/list-members-group.client.view.html"}).state("viewGroup.listMembers.addMembers",{url:"/add",templateUrl:"modules/groups/views/add-members-group.client.view.html"}).state("viewGroup.listEvents",{url:"/events",templateUrl:"modules/groups/views/view-events-group.client.view.html"}).state("viewGroup.listEvents.viewEvents",{url:"/list",templateUrl:"modules/groups/views/list-events-group.client.view.html"}).state("viewGroup.listEvents.addEvents",{url:"/add",templateUrl:"modules/groups/views/add-events-group.client.view.html"}).state("viewGroup.listEvents.viewEvent",{url:"/:eventId",templateUrl:"modules/groups/views/view-event-group.client.view.html"}).state("viewGroup.listEvents.editEvent",{url:"/:eventId/edit",templateUrl:"modules/groups/views/edit-event-group.client.view.html"})}]),angular.module("groups").controller("GroupsController",GroupsController),GroupsController.$inject=["$scope","$state","$stateParams","$location","Authentication","Groups","Search","lodash","dialogs","$q","growl"],angular.module("groups").factory("GroupEvents",GroupEvents),GroupEvents.$inject=["$http"],angular.module("groups").factory("Groups",["$resource",function($resource){return $resource("/api/users/groups/:groupId",{groupId:"@_id"},{update:{method:"PUT"},query:{method:"GET",isArray:!0}})}]),angular.module("members").controller("MembersController",MembersController),MembersController.$inject=["$scope","$state","$stateParams","$location","Authentication","Groups","Search","lodash","$modalInstance","data"],angular.module("sms").config(["$stateProvider",function($stateProvider){$stateProvider.state("sms",{url:"/sms",templateUrl:"modules/sms/views/sms.client.view.html",resolve:{CarrierFactory:"CarrierFactory",carriers:["CarrierFactory",function(CarrierFactory){return CarrierFactory.getCarriers()}]},controller:"SmsController"})}]),angular.module("sms").controller("SmsController",["$scope","$http","carriers",function($scope,$http,carriers){function getToAddr(){return $scope.smsform.phone+$scope.smsform.carrier.addr}function getText(){return $scope.smsform.msg}function sendText(){var to=getToAddr(),text=getText(),subject="Test subject";$scope.apiData={to:to,text:text,subject:subject},$scope.sentData=$scope.apiData;var promise=$http.post("/api/sms",$scope.apiData);promise.success(function(response){$scope.response=response}),promise.error(function(response){alert("error "+response)})}$scope.carriers=carriers,$scope.smsform={submit:sendText}}]),angular.module("sms").value("LocalCarriers",[{carrier:"Airfire Mobile",addr:"@sms.airfiremobile.com"},{carrier:"Alltel",addr:"@message.alltel.com"},{carrier:"Alltel (Allied Wireless)",addr:"@sms.alltelwireless.com"},{carrier:"Alaska Communications",addr:"@msg.acsalaska.com"},{carrier:"Ameritech",addr:"@paging.acswireless.com"},{carrier:"Assurance Wireless",addr:"@vmobl.com"},{carrier:"AT&T Wireless",addr:"@txt.att.net"},{carrier:"AT&T Mobility (Cingular)",addr:"@txt.att.net"},{carrier:"AT&T Enterprise Paging",addr:"@page.att.net"},{carrier:"AT&T Global Smart Messaging Suite",addr:"@sms.smartmessagingsuite.com"},{carrier:"BellSouth",addr:"@bellsouth.cl"},{carrier:"Bluegrass Cellular",addr:"@sms.bluecell.com"},{carrier:"Bluesky Communications",addr:"@psms.bluesky.as"},{carrier:"BlueSkyFrog",addr:"@blueskyfrog.com"},{carrier:"Boost Mobile",addr:"@sms.myboostmobile.com"},{carrier:"Cellcom",addr:"@cellcom.quiktxt.com"},{carrier:"Cellular South",addr:"@csouth1.com"},{carrier:"Centennial Wireless",addr:"@cwemail.com"},{carrier:"Chariton Valley Wireless",addr:"@sms.cvalley.net"},{carrier:"Chat Mobility",addr:"@mail.msgsender.com"},{carrier:"Cincinnati Bell",addr:"@gocbw.com"},{carrier:"Cingular (Postpaid)",addr:"@cingular.com"},{carrier:"Cleartalk Wireless",addr:"@sms.cleartalk.us"},{carrier:"Comcast PCS",addr:"@comcastpcs.textmsg.com"},{carrier:"Cricket",addr:"@sms.mycricket.com"},{carrier:"C Spire Wireless",addr:"@cspire1.com"},{carrier:"DTC Wireless",addr:"@sms.advantagecell.net"},{carrier:"Element Mobile",addr:"@sms.elementmobile.net"},{carrier:"Esendex",addr:"@echoemail.net"},{carrier:"General Communications Inc.",addr:"@mobile.gci.net"},{carrier:"Golden State Cellular",addr:"@gscsms.com"},{carrier:"Google Voice",addr:"@txt.voice.google.com"},{carrier:"GreatCall",addr:"@vtext.com"},{carrier:"Helio",addr:"@myhelio.com"},{carrier:"i wireless (T-Mobile)",addr:".iws@iwspcs.net"},{carrier:"i wireless (Sprint PCS)",addr:"@iwirelesshometext.com"},{carrier:"Kajeet",addr:"@mobile.kajeet.net"},{carrier:"LongLines",addr:"@text.longlines.com"},{carrier:"Metro PCS",addr:"@mymetropcs.com"},{carrier:"Nextech",addr:"@sms.nextechwireless.com"},{carrier:"Nextel Direct Connect (Sprint)",addr:"@messaging.nextel.com"},{carrier:"Page Plus Cellular",addr:"@vtext.com"},{carrier:"Pioneer Cellular",addr:"@zsend.com"},{carrier:"PSC Wireless",addr:"@sms.pscel.com"},{carrier:"Rogers Wireless",addr:"@sms.rogers.com"},{carrier:"Qwest",addr:"@qwestmp.com"},{carrier:"Simple Mobile",addr:"@smtext.com"},{carrier:"Solavei",addr:"@tmomail.net"},{carrier:"South Central Communications",addr:"@rinasms.com"},{carrier:"Southern Link",addr:"@page.southernlinc.com"},{carrier:"Sprint PCS (CDMA)",addr:"@messaging.sprintpcs.com"},{carrier:"Straight Talk",addr:"@vtext.com"},{carrier:"Syringa Wireless",addr:"@rinasms.com"},{carrier:"T-Mobile",addr:"@tmomail.net"},{carrier:"Teleflip",addr:"@teleflip.com"},{carrier:"Ting",addr:"@message.ting.com"},{carrier:"Tracfone",addr:"@mmst5.tracfone.com"},{carrier:"Telus Mobility",addr:"@msg.telus.com"},{carrier:"Unicel",addr:"@utext.com"},{carrier:"US Cellular",addr:"@email.uscc.net"},{carrier:"USA Mobility",addr:"@usamobility.net"},{carrier:"Verizon Wireless",addr:"@vtext.com"},{carrier:"Viaero",addr:"@viaerosms.com"},{carrier:"Virgin Mobile",addr:"@vmobl.com"},{carrier:"Voyager Mobile",addr:"@text.voyagermobile.com"},{carrier:"West Central Wireless",addr:"@sms.wcc.net"},{carrier:"XIT Communications",addr:"@sms.xit.net"}]);var app=angular.module("sms").factory("CarrierFactory",["$http","$q","CarrierService","LocalCarriers",function($http,$q,CarrierService,localCarriers){function success(data){200===data.status?cs.setCarriers(data.data):cs.getCarriers()||cs.setCarriers(localCarriers),deferred.resolve(cs.getCarriers())}function error(){cs.getCarriers()||cs.setCarriers(localCarriers),deferred.resolve(cs.getCarriers())}function getCarriers(){return cs.getCarriers()?deferred.resolve(cs.getCarriers()):$http.get("/api/carriers/countries/us").success(success).error(error),deferred.promise}var cs=CarrierService,deferred=$q.defer();return{getCarriers:getCarriers}}]);app.service("CarrierService",["$rootScope",function($rootScope){this.cachedCarriers=null,this.setCarriers=function(cr){this.cachedCarriers=cr,$rootScope.$broadcast("carrier.update")},this.getCarriers=function(){return this.cachedCarriers}}]),angular.module("userform").config(["$stateProvider",function($stateProvider){$stateProvider.state("userform",{url:"/form",templateUrl:"modules/userform/views/userform.client.view.html"})
}]),angular.module("userform").controller("UserformController",["$scope","Userform",function($scope,Userform){function saveEntry(){Userform.save($scope.userform).$promise.then(function(data){$scope.message=data,retrieveEntries()},function(data){$scope.message=data})}function retrieveEntries(){var entries=Userform.query(function(){$scope.entries=entries})}$scope.userform={submit:function(){saveEntry()}},retrieveEntries()}]),angular.module("userform").factory("Userform",["$resource",function($resource){return $resource("/test/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(config),config.$inject=["$httpProvider"],angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication","CarrierFactory",function($scope,$http,$location,Authentication,CarrierFactory){CarrierFactory.getCarriers().then(function(data){$scope.carriers=data}),$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$scope.credentials.carrier=$scope.credentials.carrier.addr,$http.post("/api/users",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(errorResponse){$scope.error=errorResponse.clientMessage})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(errorResponse){$scope.error=errorResponse.clientMessage})},$scope.confirmPassword=function(){var password=$scope.credentials.password||"";$scope.isPasswordError=password.trimRight()===$scope.credentials.confirmPassword.trimRight()}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(errorResponse){$scope.credentials=null,$scope.error=errorResponse.clientMessage})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(errorResponse){$scope.error=errorResponse.clientMessage})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(errorResponse){$scope.error=errorResponse.clientMessage})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(errorResponse){$scope.error=errorResponse.clientMessage})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(errorResponse){$scope.error=errorResponse.clientMessage})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Authorization",Authorization),Authorization.$inject=["$rootScope","$state","authentication"],function(){function HttpProviderInterceptor($q,$location,Authentication,growl){function responseError(rejection){switch(rejection.status){case 400:if(rejection.data){var data=rejection.data,config={};data.clientMessage.forEach(function(msg){config.title=msg,growl.warning(msg,config)}),data.devMessage.forEach(function(msg){config.title=msg,growl.warning(msg,config)})}break;case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}var provider={responseError:responseError};return provider}angular.module("users").factory("HttpProviderInterceptor",HttpProviderInterceptor),HttpProviderInterceptor.$inject=["$q","$location","Authentication","growl"]}.call(this),angular.module("users").factory("Search",Search),Search.$inject=["$http"],angular.module("users").factory("Users",Users),Users.$inject=["$resource"],angular.module("users").factory("UserService",UserService),UserService.$inject=["$http"],angular.module("validationrule",["validation"]).config(["$validationProvider",function($validationProvider){var expression={required:function(value){return!!value},positiveIntegers:/^\d+$/,email:/^.*@.*\..*[a-z]$/i,phone:/(\W|^)[(]{0,1}\d{3}[)]{0,1}[\s-]{0,1}\d{3}[\s-]{0,1}\d{4}(\W|$)/,zip:/^\d{5}(-\d{4})?$/,nospecialchars:/^[a-z0-9_\-\s]*$/i,alpha:/^[a-z]*$/i,nospace:/^[^\s]+$/,oneUpperCaseLetter:function(value){return/^(?=.*[A-Z]).+$/.test(value)},oneLowerCaseLetter:function(value){return/^(?=.*[a-z]).+$/.test(value)},oneNumber:function(value){return/^(?=.*[0-9]).+$/.test(value)},oneAlphabet:function(value){return/^(?=.*[a-z]).+$/i.test(value)},minlength:function(value,scope,element,attrs){var val=value||"";return val.length>=parseInt(attrs.ngMinlength,10)},maxlength:function(value,scope,element,attrs){var val=value||"";return val.length<=parseInt(attrs.ngMaxlength,10)?!0:!1}},defaultMsg={required:{error:"Required!!"},positiveIntegers:{error:"Please enter only positive numbers with no decimals"},email:{error:"Please enter a valid email"},phone:{error:"Please enter a valid phone number"},zip:{error:"Please enter a valid zip code"},nospecialchars:{error:"Valid characters are: A-Z, a-z, 0-9"},alpha:{error:"Valid characters are: A-Z, a-z"},nospace:{error:"Cannot contain any spaces"},oneUpperCaseLetter:{error:"Must contain at least one uppercase letter."},oneLowerCaseLetter:{error:"Must contain at least one lowercase letter"},oneNumber:{error:"Must contain at least one number"},oneAlphabet:{error:"Must contain at least one alphabet"}};$validationProvider.setErrorHTML(function(msg){return"<div class='has-error'>"+msg+"</div>"}),$validationProvider.setExpression(expression).setDefaultMsg(defaultMsg),$validationProvider.showSuccessMessage=!1,$validationProvider.showErrorMessage=!0}]),angular.module("validationrule").directive("vr-match",[function(){return{require:"ngModel",restrict:"A",scope:{match:"="},link:function(scope,elem,attrs,ctrl){scope.$watch(function(){var modelValue=ctrl.$modelValue||ctrl.$$invalidModelValue;return ctrl.$pristine&&angular.isUndefined(modelValue)||scope.match===modelValue},function(currentValue){ctrl.$setValidity("match",currentValue)})}}}]);